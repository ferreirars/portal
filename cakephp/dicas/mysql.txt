Dicas sobre o SGBDs livres MySQL

Trocar a senha do root
mysqladmin -u root -p password senhanova

CREATE DATABASE nomebanco;

Ver bancos existentes:
SHOW DATABASES;

CREATE TABLE

MySQL
CREATE TABLE IF NOT EXISTS `students` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
  `email` varchar(150) COLLATE utf8_unicode_ci NOT NULL,
  `mobile` varchar(20) COLLATE utf8_unicode_ci NOT NULL,
  `address` varchar(200) COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=10 ;

CREATE TABLE `produtos`(
	`id` INTEGER AUTO_INCREMENT NOT NULL,
	`descricao` VARCHAR(40) default '' NOT NULL,
	`fornecedor_id` INTEGER,
	`categoria_id` INTEGER,
	`quantidade` INTEGER,
	`preco` DECIMAL(12,2),
	`estoque` INTEGER,
	`unidades_pedido` INTEGER,
	`nivel_pedido` INTEGER,
	`descontinuado` INTEGER default 0 NOT NULL,
	`observacao` TEXT,
	`data` DATE,
	PRIMARY KEY (`id`)
)Type=MyISAM;

INSERT INTO `produtos` (`id`,`descricao`,`fornecedor_id`,`categoria_id`,`quantidade`,`preco`,`estoque`,`unidades_pedido`,`nivel_pedido`,`descontinuado`,`observacao`,`data`) VALUES (1,'Chai Tea',1,1,'10 boxes x 20 bags',18,39,-7,10,' ','2001-12-01');


Scrips

MySQL ou PostgreSQL (este script funciona nos dois)

create table clientes
(
	cliente int primary key,
	cpf char(11),
	nome char(45) not null,
	credito_liberado char(1) not null,
	data_nasc date,
	email varchar(50)
);

create table funcionarios
(
	funcionario int primary key,
	cpf char(11),
	nome char(45) not null,
	senha char(32) not null,
	email varchar(50),
	data_nasc date not null
);

create table pedidos
(
	pedido int primary key,
	cliente_id int not null,
	funcionario_id int not null,
	data_pedido date not null,
	data_confirmacao date not null,
    FOREIGN KEY (cliente_id) REFERENCES clientes(cliente) ON DELETE RESTRICT,
    FOREIGN KEY (funcionario_id) REFERENCES funcionarios(funcionario) ON DELETE RESTRICT
);

Outra forma: constraint pedidos_cli_fk foreign key(cliente_id) REFERENCES clientes (cliente)

ALTER DATABASE 

ALTER TABLE pedidos ADD CONSTRAINT pedidos_cli_fk FOREIGN KEY (cliente_id) REFERENCES clientes (cliente);

ALTER TABLE clientes ADD CHECK (length(cpf)=11);

ALTER TABLE estoque ALTER COLUMN data SET DEFAULT CURRENT_DATE;


Dicas Avançadas:

SELECT CASE WHEN 10*2=30 THEN '30 incorrect'
   WHEN 10*2=40 THEN '40 incorrect'
   ELSE 'Deve ser 10*2=20'
END;

SELECT CASE 10*2
   WHEN 20 THEN '20 correct'
   WHEN 30 THEN '30 incorrect'
   WHEN 40 THEN '40 incorrect'
END;

SELECT CASE WHEN 9>7 
                 THEN "TRUE" 
                 ELSE 
                 "FALSE" 
                 END 
  AS "Resultado";

Trazer somente 1 registro posterior ao valor fornecido
SELECT id, title FROM topics WHERE id > $currentTopicId ORDER BY id ASC LIMIT 1

SELECT cliente, nome FROM clientes WHERE cliente > 1 ORDER BY cliente ASC LIMIT 1

Trazer somente 1 registro anterior ao valor fornecido
SELECT id FROM entrada_dados WHERE id < 10 ORDER BY id DESC LIMIT 1
SELECT data,total FROM entrada_dados WHERE data < '2009-07-01' ORDER BY total DESC LIMIT 1

Com outros parâmetros no WHERE
SELECT id, title FROM topics WHERE id > $currentTopicId and visible=1 ORDER BY id ASC LIMIT 1

Último registro
SELECT id FROM tab_pecas WHERE id = (SELECT MAX id from tab_pecas)

SELECT nm_dept FROM departamento ORDER BY codigo DESC LIMIT 1

SELECT entidades FROM entrada_dados ORDER BY id DESC LIMIT 1

select * from employee1 order by empid,name,dob  asc limit 1;

SELECT LAST_INSERT_ID()


Data com MySQL

SELECT CURRENT_DATE();

SELECT DATE_FORMAT( CURDATE( ) , '%d/%m/%Y' ) 

SELECT EXTRACT(DAY FROM CURDATE()) AS DIA, EXTRACT(MONTH FROM CURDATE()) AS MES, EXTRACT(YEAR FROM CURDATE()) AS ANO;

%d	Dia do mês numérico(00..31)
%D	Dia do mês com sufixo (em Inglês)
%m	Mês, numérico(00..12)
%M	Nome do Mês(em Inglês)
%y	Ano, numérico (dois dígitos)
%Y	Ano, quatro dígitos numéricos

Somando 30 dias
SELECT DATE_ADD(CURDATE(), INTERVAL 30 DAY);

Encontrando a diferença em dias entre 2 datas.
SELECT DATEDIFF('2012-08-21', '2012-08-05');

Encontrando a diferença em meses entre 2 datas.
SELECT PERIOD_DIFF('201212', '201208');

Dia do ano
SELECT DAYOFYEAR('2012-08-21'); 

http://www.devmedia.com.br/funcoes-de-manipulacao-de-data-do-mysql-5-5/25539

SELECT concat(month(mes) , '/', year(mes)) FROM despesas WHERE id = '1'

SELECT STR_TO_DATE( '01/5/2013', '%d/%m/%Y' ) 

Formato mês/ano
SELECT DATE_FORMAT( '2009-10-04', '%m/%Y' ) -> 10/2009

SELECT EXTRACT( YEAR FROM '2009-07-02' )  -> 2009


TRANSAÇÕES

Iniciar uma trabsação:

set autocommit=0;
start transaction; -- Para versões anteriores a 4 usa-se, ao invés, begin;

insert into conteudo values (21, 'teste','Teste', 'TESTE');

commit; -- Caso queira confirmar
rollback; -- Caso queira cancelar os comandos


Exportando:
mysqldump -u user -p passwd banco > banco.sql


Importando:
mysql -u user -p password banco < banco.sql


TRIGGER NO MYSQL

Criando uma tabela de logs
Que guardará informações dos registros excluídos e atualizados

Exemplo de tabela, cujas operações (delete e update) queremos monitorar

create table clientes
(
	cliente int primary key,
	cpf char(11),
	nome char(45) not null,
	credito_liberado char(1) not null,
	data_nasc date,
	email varchar(50)
)engine innodb;

Exemplo de tabela onde queremos guardar as informações (logs) sobre as alterações, a data e hora e quem efetuou

create table logs
(
	code int auto_increment primary key,
	tablel char(20) not null,
	operation char(6) not null,
	login char(12) not null,
	datet datetime not null
)engine innodb;

Exemplo de trigger que fará o serviço automaticamente a cada operação de delete

delimiter |  
DROP TRIGGER IF EXISTS tg_delete
CREATE TRIGGER tg_delete BEFORE DELETE ON clientes 
FOR EACH ROW 
BEGIN  
INSERT INTO logs SET tablel = 'clientes', operation = 'delete',login = CURRENT_USER, datet = NOW();
END;
| delimiter;

Exemplo de trigger que fará o serviço automaticamente a cada operação de update

delimiter |
CREATE TRIGGER tg_update BEFORE UPDATE ON clientes
   FOR EACH ROW BEGIN
     INSERT INTO logs SET cliente = OLD.cliente, nome=OLD.nome;
   END;
|
delimiter ;


Inserir registros numa tabela vindos de outra tabela existente com estrutura similar:
INSERT INTO nometabela SELECT * FROM nometabela2;


